//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FaClient.FaStorageService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FaStorageService.IFaStorageService")]
    public interface IFaStorageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/RegisterClient", ReplyAction="http://tempuri.org/IFaStorageService/RegisterClientResponse")]
        Infrastructure.Models.CClientInfo RegisterClient(string computerName, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/RegisterClient", ReplyAction="http://tempuri.org/IFaStorageService/RegisterClientResponse")]
        System.Threading.Tasks.Task<Infrastructure.Models.CClientInfo> RegisterClientAsync(string computerName, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindEventInfoById", ReplyAction="http://tempuri.org/IFaStorageService/FindEventInfoByIdResponse")]
        Infrastructure.Models.CEventInfo FindEventInfoById(System.Guid eventInfoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindEventInfoById", ReplyAction="http://tempuri.org/IFaStorageService/FindEventInfoByIdResponse")]
        System.Threading.Tasks.Task<Infrastructure.Models.CEventInfo> FindEventInfoByIdAsync(System.Guid eventInfoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindAllRules", ReplyAction="http://tempuri.org/IFaStorageService/FindAllRulesResponse")]
        System.Collections.Generic.List<Infrastructure.Models.CRule> FindAllRules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindAllRules", ReplyAction="http://tempuri.org/IFaStorageService/FindAllRulesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Infrastructure.Models.CRule>> FindAllRulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindRulesByClientId", ReplyAction="http://tempuri.org/IFaStorageService/FindRulesByClientIdResponse")]
        System.Collections.Generic.List<Infrastructure.Models.CRule> FindRulesByClientId(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindRulesByClientId", ReplyAction="http://tempuri.org/IFaStorageService/FindRulesByClientIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Infrastructure.Models.CRule>> FindRulesByClientIdAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindRuleById", ReplyAction="http://tempuri.org/IFaStorageService/FindRuleByIdResponse")]
        Infrastructure.Models.CRule FindRuleById(System.Guid ruleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindRuleById", ReplyAction="http://tempuri.org/IFaStorageService/FindRuleByIdResponse")]
        System.Threading.Tasks.Task<Infrastructure.Models.CRule> FindRuleByIdAsync(System.Guid ruleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindClientsWithLastDate", ReplyAction="http://tempuri.org/IFaStorageService/FindClientsWithLastDateResponse")]
        System.Collections.Generic.List<Infrastructure.Models.CClientInfo> FindClientsWithLastDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindClientsWithLastDate", ReplyAction="http://tempuri.org/IFaStorageService/FindClientsWithLastDateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Infrastructure.Models.CClientInfo>> FindClientsWithLastDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindClientInfoById", ReplyAction="http://tempuri.org/IFaStorageService/FindClientInfoByIdResponse")]
        Infrastructure.Models.CClientInfo FindClientInfoById(System.Guid clientInfoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindClientInfoById", ReplyAction="http://tempuri.org/IFaStorageService/FindClientInfoByIdResponse")]
        System.Threading.Tasks.Task<Infrastructure.Models.CClientInfo> FindClientInfoByIdAsync(System.Guid clientInfoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindClientInfo", ReplyAction="http://tempuri.org/IFaStorageService/FindClientInfoResponse")]
        System.Collections.Generic.List<Infrastructure.Models.CClientInfo> FindClientInfo(string computerName, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/FindClientInfo", ReplyAction="http://tempuri.org/IFaStorageService/FindClientInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Infrastructure.Models.CClientInfo>> FindClientInfoAsync(string computerName, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/WriteEventInfo", ReplyAction="http://tempuri.org/IFaStorageService/WriteEventInfoResponse")]
        bool WriteEventInfo(Infrastructure.Models.CEventInfo eventInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/WriteEventInfo", ReplyAction="http://tempuri.org/IFaStorageService/WriteEventInfoResponse")]
        System.Threading.Tasks.Task<bool> WriteEventInfoAsync(Infrastructure.Models.CEventInfo eventInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/SendNotification", ReplyAction="http://tempuri.org/IFaStorageService/SendNotificationResponse")]
        bool SendNotification(Infrastructure.Models.CEventInfo eventInfo, Infrastructure.Models.CRule rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/SendNotification", ReplyAction="http://tempuri.org/IFaStorageService/SendNotificationResponse")]
        System.Threading.Tasks.Task<bool> SendNotificationAsync(Infrastructure.Models.CEventInfo eventInfo, Infrastructure.Models.CRule rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/DeleteRule", ReplyAction="http://tempuri.org/IFaStorageService/DeleteRuleResponse")]
        void DeleteRule(System.Guid ruleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/DeleteRule", ReplyAction="http://tempuri.org/IFaStorageService/DeleteRuleResponse")]
        System.Threading.Tasks.Task DeleteRuleAsync(System.Guid ruleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/InsertRule", ReplyAction="http://tempuri.org/IFaStorageService/InsertRuleResponse")]
        void InsertRule(Infrastructure.Models.CRule rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/InsertRule", ReplyAction="http://tempuri.org/IFaStorageService/InsertRuleResponse")]
        System.Threading.Tasks.Task InsertRuleAsync(Infrastructure.Models.CRule rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/UpdateRule", ReplyAction="http://tempuri.org/IFaStorageService/UpdateRuleResponse")]
        void UpdateRule(Infrastructure.Models.CRule rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/UpdateRule", ReplyAction="http://tempuri.org/IFaStorageService/UpdateRuleResponse")]
        System.Threading.Tasks.Task UpdateRuleAsync(Infrastructure.Models.CRule rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/UpdateClient", ReplyAction="http://tempuri.org/IFaStorageService/UpdateClientResponse")]
        void UpdateClient(Infrastructure.Models.CClientInfo client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/UpdateClient", ReplyAction="http://tempuri.org/IFaStorageService/UpdateClientResponse")]
        System.Threading.Tasks.Task UpdateClientAsync(Infrastructure.Models.CClientInfo client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/SearchEvents", ReplyAction="http://tempuri.org/IFaStorageService/SearchEventsResponse")]
        System.Collections.ObjectModel.ReadOnlyCollection<Infrastructure.Models.CEventInfo> SearchEvents(Infrastructure.Models.CSearchFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaStorageService/SearchEvents", ReplyAction="http://tempuri.org/IFaStorageService/SearchEventsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ReadOnlyCollection<Infrastructure.Models.CEventInfo>> SearchEventsAsync(Infrastructure.Models.CSearchFilter filter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFaStorageServiceChannel : FaClient.FaStorageService.IFaStorageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FaStorageServiceClient : System.ServiceModel.ClientBase<FaClient.FaStorageService.IFaStorageService>, FaClient.FaStorageService.IFaStorageService {
        
        public FaStorageServiceClient() {
        }
        
        public FaStorageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FaStorageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaStorageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaStorageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Infrastructure.Models.CClientInfo RegisterClient(string computerName, string ipAddress) {
            return base.Channel.RegisterClient(computerName, ipAddress);
        }
        
        public System.Threading.Tasks.Task<Infrastructure.Models.CClientInfo> RegisterClientAsync(string computerName, string ipAddress) {
            return base.Channel.RegisterClientAsync(computerName, ipAddress);
        }
        
        public Infrastructure.Models.CEventInfo FindEventInfoById(System.Guid eventInfoId) {
            return base.Channel.FindEventInfoById(eventInfoId);
        }
        
        public System.Threading.Tasks.Task<Infrastructure.Models.CEventInfo> FindEventInfoByIdAsync(System.Guid eventInfoId) {
            return base.Channel.FindEventInfoByIdAsync(eventInfoId);
        }
        
        public System.Collections.Generic.List<Infrastructure.Models.CRule> FindAllRules() {
            return base.Channel.FindAllRules();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Infrastructure.Models.CRule>> FindAllRulesAsync() {
            return base.Channel.FindAllRulesAsync();
        }
        
        public System.Collections.Generic.List<Infrastructure.Models.CRule> FindRulesByClientId(System.Guid clientId) {
            return base.Channel.FindRulesByClientId(clientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Infrastructure.Models.CRule>> FindRulesByClientIdAsync(System.Guid clientId) {
            return base.Channel.FindRulesByClientIdAsync(clientId);
        }
        
        public Infrastructure.Models.CRule FindRuleById(System.Guid ruleId) {
            return base.Channel.FindRuleById(ruleId);
        }
        
        public System.Threading.Tasks.Task<Infrastructure.Models.CRule> FindRuleByIdAsync(System.Guid ruleId) {
            return base.Channel.FindRuleByIdAsync(ruleId);
        }
        
        public System.Collections.Generic.List<Infrastructure.Models.CClientInfo> FindClientsWithLastDate() {
            return base.Channel.FindClientsWithLastDate();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Infrastructure.Models.CClientInfo>> FindClientsWithLastDateAsync() {
            return base.Channel.FindClientsWithLastDateAsync();
        }
        
        public Infrastructure.Models.CClientInfo FindClientInfoById(System.Guid clientInfoId) {
            return base.Channel.FindClientInfoById(clientInfoId);
        }
        
        public System.Threading.Tasks.Task<Infrastructure.Models.CClientInfo> FindClientInfoByIdAsync(System.Guid clientInfoId) {
            return base.Channel.FindClientInfoByIdAsync(clientInfoId);
        }
        
        public System.Collections.Generic.List<Infrastructure.Models.CClientInfo> FindClientInfo(string computerName, string ipAddress) {
            return base.Channel.FindClientInfo(computerName, ipAddress);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Infrastructure.Models.CClientInfo>> FindClientInfoAsync(string computerName, string ipAddress) {
            return base.Channel.FindClientInfoAsync(computerName, ipAddress);
        }
        
        public bool WriteEventInfo(Infrastructure.Models.CEventInfo eventInfo) {
            return base.Channel.WriteEventInfo(eventInfo);
        }
        
        public System.Threading.Tasks.Task<bool> WriteEventInfoAsync(Infrastructure.Models.CEventInfo eventInfo) {
            return base.Channel.WriteEventInfoAsync(eventInfo);
        }
        
        public bool SendNotification(Infrastructure.Models.CEventInfo eventInfo, Infrastructure.Models.CRule rule) {
            return base.Channel.SendNotification(eventInfo, rule);
        }
        
        public System.Threading.Tasks.Task<bool> SendNotificationAsync(Infrastructure.Models.CEventInfo eventInfo, Infrastructure.Models.CRule rule) {
            return base.Channel.SendNotificationAsync(eventInfo, rule);
        }
        
        public void DeleteRule(System.Guid ruleId) {
            base.Channel.DeleteRule(ruleId);
        }
        
        public System.Threading.Tasks.Task DeleteRuleAsync(System.Guid ruleId) {
            return base.Channel.DeleteRuleAsync(ruleId);
        }
        
        public void InsertRule(Infrastructure.Models.CRule rule) {
            base.Channel.InsertRule(rule);
        }
        
        public System.Threading.Tasks.Task InsertRuleAsync(Infrastructure.Models.CRule rule) {
            return base.Channel.InsertRuleAsync(rule);
        }
        
        public void UpdateRule(Infrastructure.Models.CRule rule) {
            base.Channel.UpdateRule(rule);
        }
        
        public System.Threading.Tasks.Task UpdateRuleAsync(Infrastructure.Models.CRule rule) {
            return base.Channel.UpdateRuleAsync(rule);
        }
        
        public void UpdateClient(Infrastructure.Models.CClientInfo client) {
            base.Channel.UpdateClient(client);
        }
        
        public System.Threading.Tasks.Task UpdateClientAsync(Infrastructure.Models.CClientInfo client) {
            return base.Channel.UpdateClientAsync(client);
        }
        
        public System.Collections.ObjectModel.ReadOnlyCollection<Infrastructure.Models.CEventInfo> SearchEvents(Infrastructure.Models.CSearchFilter filter) {
            return base.Channel.SearchEvents(filter);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ReadOnlyCollection<Infrastructure.Models.CEventInfo>> SearchEventsAsync(Infrastructure.Models.CSearchFilter filter) {
            return base.Channel.SearchEventsAsync(filter);
        }
    }
}
